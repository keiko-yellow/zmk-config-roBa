#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DQT>;
            key-positions = <9 8>;
        };

        windows {
            bindings = <&kp LEFT_WIN>;
            key-positions = <34 38>;
        };

        ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <18 19>;
        };

        Alt {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <20 19>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <41 42>;
        };

        layer6 {
            bindings = <&to 3>;
            key-positions = <0 1>;
        };

        a {
            bindings = <&kp AT>;
            key-positions = <6 7>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt_to_layer_0 3 Q    &kp L           &kp U         &kp COMMA         &kp DOT                                       &kp F                   &kp W  &kp R  &kp Y  &kp P
&kp E                 &kp I           &kp A         &kp O             &kp MINUS  &kp LANGUAGE_1      &kp F7         &kp K                   &kp T  &kp N  &kp S  &kp H
&kp Z                 &kp X           &kp C         &kp V             &kp B      &kp LANGUAGE_2      &kp F10        &kp G                   &kp D  &kp M  &kp J  &kp B
&lt_to_layer_0 4 ESC  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp TAB    &kp ENTER           &kp BACKSPACE  &lt_to_layer_0 1 SPACE                       &lt_to_layer_0 2 DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM_ARROW {
            bindings = <
&kp KP_N6        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0                         &kp LS(NUMBER_7)   &kp EXCLAMATION  &kp UP_ARROW      &kp QUESTION          &trans
&kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &trans         &trans  &kp AT_SIGN        &kp LEFT_ARROW   &kp LEFT_BRACKET  &kp RIGHT_ARROW       &trans
&kp PLUS         &kp MINUS        &kp DOT          &kp ASTERISK     &kp SLASH        &trans         &trans  &kp LS(SEMICOLON)  &kp ASTERISK     &kp DOWN          &kp LEFT_PARENTHESIS  &trans
&trans           &trans           &trans           &kp COLON        &kp UNDERSCORE   &kp MINUS      &trans  &trans                                                                      &trans
            >;
        };

        SIGN_FUNCTION {
            bindings = <
&kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)     &kp CARET   &trans                      &kp F9  &kp F10  &kp F11  &kp F12  &trans
&kp LS(COMMA)     &kp LS(PERIOD)    &kp LS(MINUS)  &kp PERIOD  &trans  &trans      &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans            &trans            &trans         &trans      &trans  &trans      &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans            &trans            &trans         &trans      &trans  &trans      &trans  &trans                             &trans
            >;
        };

        layer_BT_SEL0-4 {
            bindings = <
&trans  &gresc        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans          &msc SCRL_UP     &msc MOVE_Y(20)   &trans                      &trans  &mkp MB4        &msc SCRL_UP    &mkp MB5         &trans
&trans  &msc SCRL_LEFT  &msc MOVE_X(15)  &msc SCRL_RIGHT   &trans  &trans      &trans  &trans  &mkp MB1        &mkp MB3        &mkp MB2         &trans
&trans  &trans          &msc SCRL_DOWN   &msc MOVE_Y(-20)  &trans  &trans      &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans
&trans  &trans          &trans           &trans            &trans  &trans      &trans  &trans                                                   &trans
            >;
        };

        NG_ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        NG_SCROLL {
            bindings = <
&kp KP_EQUAL     &kp LC(AT_SIGN)  &kp PIPE          &kp COMMA  &trans                            &kp AT_SIGN   &kp POUND    &kp CARET      &kp LEFT_PARENTHESIS   &kp UNDERSCORE
&kp KP_SLASH     &kp RS(AT_SIGN)  &kp GRAVE         &trans     &trans  &trans      &kp NUMBER_2  &kp AT        &kp DOLLAR   &kp AMPERSAND  &kp RIGHT_PARENTHESIS  &kp EQUAL
&kp LS(AT_SIGN)  &kp RIGHT_BRACE  &kp TILDE         &trans     &trans  &trans      &kp N2        &kp NUMBER_3  &kp PERCENT  &kp ASTERISK   &kp MINUS              &kp LEFT_BRACKET
&kp LA(AT_SIGN)  &kp BACKSLASH    &kp GREATER_THAN  &trans     &trans  &trans      &trans        &trans                                                           &kp RIGHT_BRACKET
            >;
        };
    };
};
